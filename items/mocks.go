// Code generated by MockGen. DO NOT EDIT.
// Source: items.go

// Package mock_items is a generated GoMock package.
package items

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPersister is a mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
}

// MockPersisterMockRecorder is the mock recorder for MockPersister
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// MoveItem mocks base method
func (m *MockPersister) MoveItem(ID, direction string, userID int) error {
	ret := m.ctrl.Call(m, "MoveItem", ID, direction, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveItem indicates an expected call of MoveItem
func (mr *MockPersisterMockRecorder) MoveItem(ID, direction, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveItem", reflect.TypeOf((*MockPersister)(nil).MoveItem), ID, direction, userID)
}

// DeleteItem mocks base method
func (m *MockPersister) DeleteItem(ID string, userID int) error {
	ret := m.ctrl.Call(m, "DeleteItem", ID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem
func (mr *MockPersisterMockRecorder) DeleteItem(ID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockPersister)(nil).DeleteItem), ID, userID)
}

// SearchItems mocks base method
func (m *MockPersister) SearchItems(search string) (ItemDetailList, error) {
	ret := m.ctrl.Call(m, "SearchItems", search)
	ret0, _ := ret[0].(ItemDetailList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchItems indicates an expected call of SearchItems
func (mr *MockPersisterMockRecorder) SearchItems(search interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchItems", reflect.TypeOf((*MockPersister)(nil).SearchItems), search)
}

// AddItem mocks base method
func (m *MockPersister) AddItem(obj ItemDetail, overwrite bool) error {
	ret := m.ctrl.Call(m, "AddItem", obj, overwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem
func (mr *MockPersisterMockRecorder) AddItem(obj, overwrite interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockPersister)(nil).AddItem), obj, overwrite)
}
