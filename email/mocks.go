// Code generated by MockGen. DO NOT EDIT.
// Source: email.go

// Package mock_email is a generated GoMock package.
package email

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gomail_v2 "gopkg.in/gomail.v2"
)

// MockSender is a mock of Sender interface
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method
func (m_2 *MockSender) DialAndSend(m ...*gomail_v2.Message) error {
	varargs := []interface{}{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend
func (mr *MockSenderMockRecorder) DialAndSend(m ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockSender)(nil).DialAndSend), m...)
}
