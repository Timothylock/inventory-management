// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mock_users is a generated GoMock package.
package users

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPersister is a mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
}

// MockPersisterMockRecorder is the mock recorder for MockPersister
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockPersister) GetUser(username, password string) (User, error) {
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockPersisterMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPersister)(nil).GetUser), username, password)
}

// GetUserByToken mocks base method
func (m *MockPersister) GetUserByToken(token string) (User, error) {
	ret := m.ctrl.Call(m, "GetUserByToken", token)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken
func (mr *MockPersisterMockRecorder) GetUserByToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockPersister)(nil).GetUserByToken), token)
}

// GetUserByUsername mocks base method
func (m *MockPersister) GetUserByUsername(username string, curUserID int) (User, error) {
	ret := m.ctrl.Call(m, "GetUserByUsername", username, curUserID)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockPersisterMockRecorder) GetUserByUsername(username, curUserID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockPersister)(nil).GetUserByUsername), username, curUserID)
}

// AddUser mocks base method
func (m *MockPersister) AddUser(username, email, password string, isSysAdmin bool) error {
	ret := m.ctrl.Call(m, "AddUser", username, email, password, isSysAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockPersisterMockRecorder) AddUser(username, email, password, isSysAdmin interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockPersister)(nil).AddUser), username, email, password, isSysAdmin)
}

// GetUsers mocks base method
func (m *MockPersister) GetUsers() (MultipleUsers, error) {
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(MultipleUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockPersisterMockRecorder) GetUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockPersister)(nil).GetUsers))
}

// DeleteUser mocks base method
func (m *MockPersister) DeleteUser(targetID, userID int) error {
	ret := m.ctrl.Call(m, "DeleteUser", targetID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockPersisterMockRecorder) DeleteUser(targetID, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockPersister)(nil).DeleteUser), targetID, userID)
}
